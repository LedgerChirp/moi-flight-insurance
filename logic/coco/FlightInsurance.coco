coco FlightInsurance

state persistent:
    records []InsuranceRecord
    admin Address

class InsuranceRecord:
    field recordId U64
    field pnrNumber U64
    field premiumAmount U256
    field insuranceAmount U256
    field status String

    // method init(recordId U64, pnrNumber U64, premiumAmount U256, insuranceAmount U256, status String):
    //     self.recordId = recordId
    //     self.pnrNumber = pnrNumber
    //     self.premiumAmount = premiumAmount
    //     self.insuranceAmount = insuranceAmount
    //     self.status = status

endpoint deployer InitOwner!():
    mutate Address(Sender)-> FlightInsurance.State.admin
    // var record InsuranceRecord
    // record.init(0, 0, 0, 0, "Active")

////////////////////////
// Internal Functions
////////////////////////
func onlyAdmin():
    observe admin <- FlightInsurance.State.admin:
        if(Address(Sender)!=admin):
            throw "You are not authorized to perform this action"

////////////////////////
// Mutate Endpoints
////////////////////////

endpoint invokable addInsuranceRecord!(pnrNumber U64, premiumAmount U256, insuranceAmount U256, status String):
    onlyAdmin()
    mutate records <- FlightInsurance.State.records:
        var newRecord = InsuranceRecord{recordId: len(records), pnrNumber: pnrNumber, premiumAmount: premiumAmount, insuranceAmount: insuranceAmount, status: status}
        records=append(records,newRecord)

endpoint invokable claimInsurance!(pnrNumber U64, recordId U64):
    onlyAdmin()
    mutate records <- FlightInsurance.State.records:
        var record = records[recordId]
        if(record.pnrNumber==pnrNumber):
            record.status="Claimed"
            records[recordId]=record
        else:
            throw "Record not found"
////////////////////////
// Observe Endpoints
///////////////////////

endpoint invokable getInsuranceRecord(recordId U64)-> (records []InsuranceRecord):
    observe records <- FlightInsurance.State.records
    // @view
    // func getInsuranceRecord(recordId: U64)-> insuranceRecord:
    //     let record = Self.insuranceRecord[recordId]
    //     return record