coco FlightInsurance

// Persistent state of the FlightInsurance module
state persistent:
    // Internal Token state variables
    name String
    symbol String
    decimals U64
    totalSupply U64
    balanceOf Map[Address]U64
    allowances Map[Address]Map[Address]U64
    nextClaims Map[Address]I64
    // Flight Insurance state variables
    records Map[String]InsuranceRecord
    admin Address

class InsuranceRecord:
    field premiumAmount U256
    field status String

class FlightRecords:
    field 

endpoint deployer Init!(name String, symbol String, decimals U64, totalSupply U64):
    // For Token Initializations
    mutate name -> FlightInsurance.State.name
    mutate symbol -> FlightInsurance.State.symbol
    mutate decimals -> FlightInsurance.State.decimals
    mint!(account: Address(Sender), value: totalSupply)

    // For FlightInsurance Initializations
    mutate Address(Sender)-> FlightInsurance.State.admin

    // var record InsuranceRecord
    // record.init(0, 0, 0, 0, "Active")

////////////////////////
// Internal Functions
////////////////////////

func onlyAdmin():
    observe admin <- FlightInsurance.State.admin:
        if(Address(Sender)!=admin):
            throw "You are not authorized to perform this action"


////////////////////////
// Mutate/Write Endpoints
////////////////////////

endpoint invokable AddInsuranceRecord!(pnrNumber U64, premiumAmount U256, insuranceAmount U256, status String)->(record InsuranceRecord):
    onlyAdmin()

    mutate records <- FlightInsurance.State.records:
        var newRecord = InsuranceRecord{recordId: len(records), pnrNumber: pnrNumber, premiumAmount: premiumAmount, insuranceAmount: insuranceAmount, status: status}
        records = append(records,newRecord)
        yield record newRecord

endpoint invokable ClaimInsurance!(pnrNumber U64, recordId U64):
    onlyAdmin()
   
    mutate records <- FlightInsurance.State.records:
        var record = records[recordId]
        if(record.pnrNumber==pnrNumber):
            record.status="Claimed"
            records[recordId]=record
        else:
            throw "Record not found"


////////////////////////
// Observe/Read Endpoints
///////////////////////

 



//add insurance record logic
// sabse pehle check karo ki record already exist karta hai ya nahi
// agar exist karta hai toh throw error
// 3 pools rahenge, ek ensure pro jiska premium 799, ek family jiska premium 199 aur ek business jiska premium 599
// agar nahi karta hai toh add karo
// agar add ho gaya toh return karo

// 200000 = 1000 * 200

// @view
// func getInsuranceRecord(recordId: U64)-> insuranceRecord:
//     let record = Self.insuranceRecord[recordId]
//     return record