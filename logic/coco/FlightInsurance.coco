coco FlightInsurance

// Persistent state of the FlightInsurance module
state persistent:
    // Internal Token state variables
    name String
    symbol String
    decimals U256
    totalSupply U256
    balanceOf Map[Address]U256
    allowances Map[Address]Map[Address]U256
    nextClaims Map[Address]I256
    // Flight Insurance state variables
    pool Address
    policies Map[String] Policy                       // Map of PNR => Policy              
    // activePolicies U256                               // Policy would go inactive if the flight is not delayed or if the user claims the policy
    owner Address
    // [U256][String]
class Policy:
    field policyNo U64
    field premiumAmount U256
    field claimableAmount U256
    field status String

endpoint deployer Init!(name String, symbol String, decimals U256, totalSupply U256):
    // For Token Initializations
    mutate name -> FlightInsurance.State.name
    mutate symbol -> FlightInsurance.State.symbol
    mutate decimals -> FlightInsurance.State.decimals
    mint!(account: Address(Sender), value: totalSupply)

    // For FlightInsurance Initializations
    mutate Address(Sender)-> FlightInsurance.State.owner


////////////////////////
// Internal Functions
////////////////////////

func onlyAdmin():
    observe owner <- FlightInsurance.State.owner:
        if(Address(Sender)!=owner):
            throw "You are not authorized to perform this action"

func getPolicyPayout():
    
    pass
    // totalFunds = balanceOf() with logicAddress
    // totalFunds / unclaimedPolicy - 10% for company profit


////////////////////////
// Mutate/Write Endpoints
////////////////////////

endpoint invokable UpdateFlightDelayStatus(flightNumber String, departureTime U256, delayedBy U256):
    pass
    // onlyAdmin() check
    // Update the flight delay status
    // only if the flight is not delayed then
        // decrease activePolicies by the no of policies on this flight


endpoint invokable PurchasePolicy!(pnrNumber String, premiumAmount U256)->(purchasedPolicy Policy):
    onlyAdmin()
    if premiumAmount<=0:
        throw "Premium amount should be greater than 0"
    else:
        mutate policies <- FlightInsurance.State.policies:
            if policies[pnrNumber]?:
                throw "Policy already exists for this PNR"
            else:
                var newPolicy = Policy{premiumAmount:premiumAmount, claimableAmount: premiumAmount*10, status:"active"}
                newPolicy.policyNo = len(policies)+1
                policies[pnrNumber] = newPolicy
                // mutate pool <- FlightInsurance.State.pool:
                transfer!(from : Address(Sender), to : Address(FlightInsurance) ,value : policies[pnrNumber].premiumAmount)
                yield purchasedPolicy policies[pnrNumber]
    // Check if departure time is atleast 6 hours from current time
    // Create Policy if policy doesn't exist
    // Transfer the funds from user to logic using transfer!() function of internal token logic
    // update the activePolicies number
    // emit an event for the oracle with flightNumber & departure time
    // so that it can keep track of it and call updateFlightDelayStatus once journey is commenced


endpoint invokable ClaimPolicy!(pnrNumber String, premiumAmount U256)->(claimedPolicy Policy):
    onlyAdmin()
    mutate policies <- FlightInsurance.State.policies:
        if policies[pnrNumber].status == "active":
            if policies[pnrNumber].claimableAmount > 0:
                mutate balanceOf <- FlightInsurance.State.balanceOf:
               //here comes the logic for doing payout according to the policy
                    var claimAmount = balanceOf[Address(FlightInsurance)] / U256(len(policies))
                    transfer!(from : Address(FlightInsurance), to : Address(Sender) ,value: claimAmount )
                policies[pnrNumber].status = "claimed"
                yield claimedPolicy policies[pnrNumber]
            else:
                throw "Policy is not claimable"
        else:
            throw "Policy is not active"
        
            
    // Check if the flight is delayed
    // Check if the policy is not already claimed
    // Calculate policyPayout
    // transfer funds
    // mark policy as paid
    // decrease the activePolicy by 1

endpoint invokable PolicyStatus!(pnrNumber String)->(policyStatus String):
    mutate policies <- FlightInsurance.State.policies:
        yield policyStatus policies[pnrNumber].status

////////////////////////
// Observe/Read Endpoints
///////////////////////




////////////////////////
// Notes
///////////////////////

// Flight cancelled would be an edge case