coco FlightInsurance

// Persistent state of the FlightInsurance module
state persistent:
    // Internal Token state variables
    name String
    symbol String
    decimals U256
    totalSupply U256
    balanceOf Map[Address]U256
    allowances Map[Address]Map[Address]U256
    nextClaims Map[Address]I256
    // Flight Insurance state variables
    policies Map[String][U256][String]Policy      // Map of FlightNumber => originalDepartureTime => PNR number => Policy
    flightDelayedBy Map[String]U256                // Map of FlightNumber =>  delayInSeconds (0 == no delay)
    activePolicies U256                           // Policy would go inactive if the flight is not delayed or if the user claims the policy
    admin Address

class Policy:
    field holder Address
    field premiumAmount U256
    field status String

endpoint deployer Init!(name String, symbol String, decimals U256, totalSupply U256):
    // For Token Initializations
    mutate name -> FlightInsurance.State.name
    mutate symbol -> FlightInsurance.State.symbol
    mutate decimals -> FlightInsurance.State.decimals
    mint!(account: Address(Sender), value: totalSupply)

    // For FlightInsurance Initializations
    mutate Address(Sender)-> FlightInsurance.State.admin


////////////////////////
// Internal Functions
////////////////////////

func onlyAdmin():
    observe admin <- FlightInsurance.State.admin:
        if(Address(Sender)!=admin):
            throw "You are not authorized to perform this action"

func getPolicyPayout():
    // totalFunds = balanceOf() with logicAddress
    // totalFunds / unclaimedPolicy


////////////////////////
// Mutate/Write Endpoints
////////////////////////

endpoint invokable UpdateFlightDelayStatus!(flightNumber String, departureTime U256, delayedBy U256):
    // onlyAdmin() check
    // Update the flight delay status
    // only if the flight is not delayed then 
        // decrease activePolicies by the no of policies on this flight


endpoint invokable PurchasePolicy!(flightNumber String, departureTime U256, pnrNumber U256, premiumAmount U256):
    // Check if departure time is atleast 6 hours from current time
    // Create Policy if policy doesn't exist
    // Transfer the funds from user to logic using transfer!() function of internal token logic
    // update the activePolicies number
    // emit an event for the oracle with flightNumber & departure time
    // so that it can keep track of it and call updateFlightDelayStatus once journey is commenced

    
endpoint invokable ClaimPolicy!(pnrNumber U256, recordId U256):
    // Check if the flight is delayed
    // Check if the policy is not already claimed
    // Calculate policyPayout
    // transfer funds
    // mark policy as paid
    // decrease the activePolicy by 1


////////////////////////
// Observe/Read Endpoints
///////////////////////






////////////////////////
// Notes
///////////////////////

// Flight cancelled would be an edge case